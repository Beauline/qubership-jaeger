{{- $otelhttpTlsConfigEnabled := .Values.collector.tlsConfig.otelHttp.enabled }} 
{{- $otelgrpcTlsConfigEnabled := .Values.collector.tlsConfig.otelgRPC.enabled }}
{{- $jaegerhttpTlsConfigEnabled := .Values.collector.tlsConfig.jaegerHttp.enabled }}
{{- $jaegergrpcTlsConfigEnabled := .Values.collector.tlsConfig.jaegergRPC.enabled }}
{{- $zipkinTlsConfigEnabled := .Values.collector.tlsConfig.zipkin.enabled }}
{{- if .Values.collector.install }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.jaeger.serviceName }}-collector
  labels:
    name: {{ .Values.jaeger.serviceName }}-collector
    app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-collector
    app.kubernetes.io/instance: {{ cat .Values.jaeger.serviceName "-collector-" .Release.Namespace | nospace | trunc 63 | trimSuffix "-" }}
    app.kubernetes.io/component: collector
    {{- include "jaeger.commonLabels" . | nindent 4 }}
    {{- if .Values.collector.labels }}
      {{- toYaml .Values.collector.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.collector.annotations }}
  annotations:
    {{- toYaml .Values.collector.annotations | nindent 4 }}
  {{- end }}
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.collector.replicas }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-collector
      app.kubernetes.io/component: collector
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: {{ .Values.jaeger.serviceName }}-collector
        app.kubernetes.io/name: {{ .Values.jaeger.serviceName }}-collector
        app.kubernetes.io/instance: {{ cat .Values.jaeger.serviceName "-collector-" .Release.Namespace | nospace | trunc 63 | trimSuffix "-" }}
        app.kubernetes.io/component: collector
        {{- include "jaeger.commonLabels" . | nindent 8 }}
        {{- if .Values.collector.labels }}
        {{- toYaml .Values.collector.labels | nindent 8 }}
        {{- end }}
        app.kubernetes.io/managed-by: Helm
      {{- if .Values.collector.annotations }}
      annotations:
        {{- toYaml .Values.collector.annotations | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.collector.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- include "collector.securityContext" . }}
      {{- if .Values.collector.priorityClassName }}
      priorityClassName: {{ .Values.collector.priorityClassName }}
      {{- end }}
      serviceAccountName: {{ .Values.jaeger.serviceName }}-collector
      containers:
        {{- if .Values.readinessProbe.install }}
        - name: readiness-probe
          image: {{ template "readiness-probe.image" . }}
          imagePullPolicy: {{ .Values.readinessProbe.imagePullPolicy }}
          command: ["/app/probe"]
          args:
            {{- template "readinessProbe.args" . }}
          ports:
            - containerPort: 8080
              protocol: TCP
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 600
            successThreshold: 1
            timeoutSeconds: 900
          livenessProbe:
            failureThreshold: 1
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            {{- toYaml .Values.readinessProbe.resources | nindent 12 }}
          securityContext:
            {{- include "readinessProbe.containerSecurityContext" . }}
          volumeMounts:
            {{- if .Values.cassandraSchemaJob.tls.enabled }}
            - name: {{ template "cassandraSchemaJob.tls.secretName" . }}
              mountPath: "/cassandra-tls/ca-cert.pem"
              subPath: "ca-cert.pem"
              readOnly: true
            - name: {{ template "cassandraSchemaJob.tls.secretName" . }}
              mountPath: "/cassandra-tls/client-cert.pem"
              subPath: "client-cert.pem"
              readOnly: true
            - name: {{ template "cassandraSchemaJob.tls.secretName" . }}
              mountPath: "/cassandra-tls/client-key.pem"
              subPath: "client-key.pem"
              readOnly: true
            {{- end }}
            {{- if and .Values.elasticsearch.client.tls.enabled (not .Values.elasticsearch.client.tls.insecureSkipVerify) }}
            - name: {{ .Values.jaeger.serviceName }}-elasticsearch-tls-assets
              mountPath: "/es-tls/ca-cert.pem"
              subPath: "ca-cert.pem"
              readOnly: true
            - name: {{ .Values.jaeger.serviceName }}-elasticsearch-tls-assets
              mountPath: "/es-tls/client-cert.pem"
              subPath: "client-cert.pem"
              readOnly: true
            - name: {{ .Values.jaeger.serviceName }}-elasticsearch-tls-assets
              mountPath: "/es-tls/client-key.pem"
              subPath: "client-key.pem"
              readOnly: true
            {{- end }}
        {{- end }}
        - name: {{ .Values.collector.name }}
          image: {{ template "collector.image" . }}
          imagePullPolicy: {{ .Values.collector.imagePullPolicy }}
          args:
            {{- if .Values.collector.cmdlineParams }}
              {{- toYaml .Values.collector.cmdlineParams | nindent 12 }}
            {{- end }}
          env:
            {{- if $otelhttpTlsConfigEnabled }}
            - name: COLLECTOR_OTLP_HTTP_TLS_ENABLED
              value: {{ $otelhttpTlsConfigEnabled | quote }}
            - name: COLLECTOR_OTLP_HTTP_TLS_CERT
              value: /collector-tls/tls.crt
            - name: COLLECTOR_OTLP_HTTP_TLS_CLIENT_CA
              value: /collector-tls/ca.crt
            - name: COLLECTOR_OTLP_HTTP_TLS_KEY
              value: /collector-tls/tls.key
            {{- if .Values.collector.tlsConfig.otelHttp.cipherSuites }}
            - name: COLLECTOR_OTLP_HTTP_TLS_CIPHER_SUITES
              value: {{ .Values.collector.tlsConfig.otelHttp.cipherSuites }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.otelHttp.maxVersion }}
            - name: COLLECTOR_OTLP_HTTP_TLS_MAX_VERSION
              value: {{ .Values.collector.tlsConfig.otelHttp.maxVersion | quote }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.otelHttp.minVersion }}
            - name: COLLECTOR_OTLP_HTTP_TLS_MIN_VERSION
              value: {{ .Values.collector.tlsConfig.otelHttp.minVersion | quote }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.otelHttp.certificateReloadInterval }}
            - name: COLLECTOR_OTLP_HTTP_TLS_RELOAD_INTERVAL
              value: {{ default "0s" .Values.collector.tlsConfig.otelHttp.certificateReloadInterval }}
            {{- end }}
            {{- end }}
            {{- if $otelgrpcTlsConfigEnabled }}
            - name: COLLECTOR_OTLP_GRPC_TLS_ENABLED
              value: {{ $otelgrpcTlsConfigEnabled | quote }}
            - name: COLLECTOR_OTLP_GRPC_TLS_CERT
              value: /collector-tls/tls.crt
            - name: COLLECTOR_OTLP_GRPC_TLS_CLIENT_CA
              value: /collector-tls/ca.crt
            - name: COLLECTOR_OTLP_GRPC_TLS_KEY
              value: /collector-tls/tls.key
            {{- if .Values.collector.tlsConfig.otelgRPC.cipherSuites }}
            - name: COLLECTOR_OTLP_GRPC_TLS_CIPHER_SUITES
              value: {{ .Values.collector.tlsConfig.otelgRPC.cipherSuites }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.otelgRPC.maxVersion }}
            - name: COLLECTOR_OTLP_GRPC_TLS_MAX_VERSION
              value: {{ .Values.collector.tlsConfig.otelgRPC.maxVersion | quote }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.otelgRPC.minVersion }}
            - name: COLLECTOR_OTLP_GRPC_TLS_MIN_VERSION
              value: {{ .Values.collector.tlsConfig.otelgRPC.minVersion | quote }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.otelgRPC.certificateReloadInterval }}
            - name: COLLECTOR_OTLP_GRPC_TLS_RELOAD_INTERVAL
              value: {{ default "0s" .Values.collector.tlsConfig.otelgRPC.certificateReloadInterval }}
            {{- end }}
            {{- end }}
            {{- if $jaegerhttpTlsConfigEnabled }}
            - name: COLLECTOR_HTTP_TLS_ENABLED
              value: {{ $jaegerhttpTlsConfigEnabled | quote }}
            - name: COLLECTOR_HTTP_TLS_CERT
              value: /collector-tls/tls.crt
            - name: COLLECTOR_HTTP_TLS_CLIENT_CA
              value: /collector-tls/ca.crt
            - name: COLLECTOR_HTTP_TLS_KEY
              value: /collector-tls/tls.key
            {{- if .Values.collector.tlsConfig.jaegerHttp.cipherSuites }}
            - name: COLLECTOR_HTTP_TLS_CIPHER_SUITES
              value: {{ .Values.collector.tlsConfig.jaegerHttp.cipherSuites }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.jaegerHttp.maxVersion }}
            - name: COLLECTOR_HTTP_TLS_MAX_VERSION
              value: {{ .Values.collector.tlsConfig.jaegerHttp.maxVersion | quote }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.jaegerHttp.minVersion }}
            - name: COLLECTOR_HTTP_TLS_MIN_VERSION
              value: {{ .Values.collector.tlsConfig.jaegerHttp.minVersion | quote }}
            {{- end }}
            {{- end }}
            {{- if $jaegergrpcTlsConfigEnabled }}
            - name: COLLECTOR_GRPC_TLS_ENABLED
              value: {{ $jaegergrpcTlsConfigEnabled | quote }}
            - name: COLLECTOR_GRPC_TLS_CERT
              value: /collector-tls/tls.crt
            - name: COLLECTOR_GRPC_TLS_CLIENT_CA
              value: /collector-tls/ca.crt
            - name: COLLECTOR_GRPC_TLS_KEY
              value: /collector-tls/tls.key
            {{- if .Values.collector.tlsConfig.jaegergRPC.cipherSuites }}
            - name: COLLECTOR_GRPC_TLS_CIPHER_SUITES
              value: {{ .Values.collector.tlsConfig.jaegergRPC.cipherSuites }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.jaegergRPC.maxVersion }}
            - name: COLLECTOR_GRPC_TLS_MAX_VERSION
              value: {{ .Values.collector.tlsConfig.jaegergRPC.maxVersion | quote }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.jaegergRPC.minVersion }}
            - name: COLLECTOR_GRPC_TLS_MIN_VERSION
              value: {{ .Values.collector.tlsConfig.jaegergRPC.minVersion | quote }}
            {{- end }}
            {{- end }}
            {{- if $zipkinTlsConfigEnabled }}
            - name: COLLECTOR_ZIPKIN_TLS_ENABLED
              value: {{ $zipkinTlsConfigEnabled | quote }}
            - name: COLLECTOR_ZIPKIN_TLS_CERT
              value: /collector-tls/tls.crt
            - name: COLLECTOR_ZIPKIN_TLS_CLIENT_CA
              value: /collector-tls/ca.crt
            - name: COLLECTOR_ZIPKIN_TLS_KEY
              value: /collector-tls/tls.key
            {{- if .Values.collector.tlsConfig.zipkin.cipherSuites }}
            - name: COLLECTOR_ZIPKIN_TLS_CIPHER_SUITES
              value: {{ .Values.collector.tlsConfig.zipkin.cipherSuites }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.zipkin.maxVersion }}
            - name: COLLECTOR_ZIPKIN_TLS_MAX_VERSION
              value: {{ .Values.collector.tlsConfig.zipkin.maxVersion | quote }}
            {{- end }}
            {{- if .Values.collector.tlsConfig.zipkin.minVersion }}
            - name: COLLECTOR_ZIPKIN_TLS_MIN_VERSION
              value: {{ .Values.collector.tlsConfig.zipkin.minVersion | quote }}
            {{- end }}
            {{- end }}
            - name: COLLECTOR_OTLP_ENABLED
              value: "true"
            {{- if .Values.collector.zipkinPort }}
            - name: COLLECTOR_ZIPKIN_HOST_PORT
              value: {{ .Values.collector.zipkinPort | quote }}
            {{- end }}
            {{- if .Values.collector.samplingConfig }}
            - name: SAMPLING_STRATEGIES_FILE
              value: /etc/jaeger/sampling/sampling.json
            {{- end }}
            - name: SPAN_STORAGE_TYPE
              value: {{ .Values.jaeger.storage.type }}
            {{- /* Section with Cassandra enviroment variables */}}
            {{- if .Values.collector.extraEnv }}
              {{- toYaml .Values.collector.extraEnv | nindent 12 }}
            {{- end }}
            {{- if eq .Values.jaeger.storage.type "cassandra" }}
            - name: CASSANDRA_SERVERS
              value: {{ include "cassandraSchemaJob.host" . | quote }}
            - name: CASSANDRA_PORT
              value: {{ include "cassandraSchemaJob.port" . | quote }}
            - name: CASSANDRA_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ template "cassandraSchemaJob.secretName" . }}
                  key: username
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "cassandraSchemaJob.secretName" . }}
                  key: password
            - name: CASSANDRA_BASIC_ALLOWED_AUTHENTICATORS
              value: {{ template "cassandraSchemaJob.allowedAuthenticators" . }}
              {{- if .Values.cassandraSchemaJob.tls.enabled }}
            - name: CASSANDRA_TLS_ENABLED
              value: "true"
                {{- if .Values.cassandraSchemaJob.tls.commonName }}
            - name: CASSANDRA_TLS_SERVER_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ template "cassandraSchemaJob.tls.secretName" . }}
                  key: commonName
                {{- end }}
            - name: CASSANDRA_TLS_KEY
              value: "/cassandra-tls/client-key.pem"
            - name: CASSANDRA_TLS_CERT
              value: "/cassandra-tls/client-cert.pem"
            - name: CASSANDRA_TLS_CA
              value: "/cassandra-tls/ca-cert.pem"
              {{- end }}
              {{- if .Values.cassandraSchemaJob.keyspace }}
            - name: CASSANDRA_KEYSPACE
              value: {{ .Values.cassandraSchemaJob.keyspace }}
              {{- end }}
            - name: CASSANDRA_LOCAL_DC
              value: {{ include "cassandraSchemaJob.datacenter" . }}            
              {{- /* Section with Cassandra extra enviroment variables */}}
              {{- if .Values.cassandraSchemaJob.extraEnv }}
                {{- toYaml .Values.cassandraSchemaJob.extraEnv | nindent 12 }}
              {{- end }}
            {{- /* Section with ElasticSearch/OpenSearch enviroment variables */}}
            {{- else if eq .Values.jaeger.storage.type "elasticsearch" }}
            - name: ES_SERVER_URLS
              value: {{ include "elasticsearch.url" . }}
            - name: ES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.elasticsearch.existingSecret }}{{ .Values.elasticsearch.existingSecret }}{{- else }}jaeger-elasticsearch{{- end }}
                  key: username
            - name: ES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ if .Values.elasticsearch.existingSecret }}{{ .Values.elasticsearch.existingSecret }}{{- else }}jaeger-elasticsearch{{- end }}
                  key: password
              {{- if .Values.elasticsearch.indexPrefix }}
            - name: ES_INDEX_PREFIX
              value: {{ .Values.elasticsearch.indexPrefix }}
              {{- end }}
              {{- if .Values.elasticsearch.client.tls.enabled }}
            - name: ES_TLS_ENABLED
              value: {{ .Values.elasticsearch.client.tls.enabled | quote }}
                {{- if or .Values.elasticsearch.client.tls.existingSecret (or .Values.elasticsearch.client.tls.ca .Values.elasticsearch.client.tls.cert .Values.elasticsearch.client.tls.key) }}
            - name: ES_TLS_CA
              value: /es-tls/ca-cert.pem
            - name: ES_TLS_CERT
              value: /es-tls/client-cert.pem
            - name: ES_TLS_KEY
              value: /es-tls/client-key.pem
                {{- else if .Values.elasticsearch.client.tls.insecureSkipVerify }}
            - name: ES_TLS_SKIP_HOST_VERIFY
              value: {{ .Values.elasticsearch.client.tls.insecureSkipVerify | quote }}
                {{- end }}
              {{- end }}
              {{- /* Section with ElasticSearch/OpenSearch extra enviroment variables */}}
              {{- if .Values.elasticsearch.extraEnv }}
                {{- toYaml .Values.elasticsearch.extraEnv | nindent 12 }}
              {{- end }}
            {{- end }}
          {{- if .Values.readinessProbe.install }}
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 300
            successThreshold: 1
            timeoutSeconds: 600
          {{- else }}
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: admin-http
              scheme: HTTP
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          {{- end }}
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /
              port: admin-http
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 15
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            {{- if .Values.collector.zipkinPort }}
            - containerPort: {{ .Values.collector.zipkinPort }}
              name: zipkin
              protocol: TCP
            {{- end }}
            - containerPort: 14267
              name: c-tchan-trft
              protocol: TCP
            - containerPort: 14268
              name: c-binary-trft
              protocol: TCP
            - containerPort: 14269
              name: admin-http
              protocol: TCP
            - containerPort: 14250
              name: grpc
              protocol: TCP
            - containerPort: 4317
              name: otlp-grpc
              protocol: TCP
            - containerPort: 4318
              name: otlp-http
              protocol: TCP
          resources:
            {{- toYaml .Values.collector.resources | nindent 12 }}
          securityContext:
            {{- include "collector.containerSecurityContext" . }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - mountPath: /etc/jaeger/sampling
              name: {{ .Values.jaeger.serviceName }}-sampling-configuration-volume
              readOnly: true
            {{- if .Values.cassandraSchemaJob.tls.enabled }}
            - name: {{ template "cassandraSchemaJob.tls.secretName" . }}
              mountPath: "/cassandra-tls/ca-cert.pem"
              subPath: "ca-cert.pem"
              readOnly: true
            - name: {{ template "cassandraSchemaJob.tls.secretName" . }}
              mountPath: "/cassandra-tls/client-cert.pem"
              subPath: "client-cert.pem"
              readOnly: true
            - name: {{ template "cassandraSchemaJob.tls.secretName" . }}
              mountPath: "/cassandra-tls/client-key.pem"
              subPath: "client-key.pem"
              readOnly: true
            {{- end }}
            {{- if and .Values.elasticsearch.client.tls.enabled (not .Values.elasticsearch.client.tls.insecureSkipVerify) }}
            - name: {{ .Values.jaeger.serviceName }}-elasticsearch-tls-assets
              mountPath: "/es-tls/ca-cert.pem"
              subPath: "ca-cert.pem"
              readOnly: true
            - name: {{ .Values.jaeger.serviceName }}-elasticsearch-tls-assets
              mountPath: "/es-tls/client-cert.pem"
              subPath: "client-cert.pem"
              readOnly: true
            - name: {{ .Values.jaeger.serviceName }}-elasticsearch-tls-assets
              mountPath: "/es-tls/client-key.pem"
              subPath: "client-key.pem"
              readOnly: true
            {{- end }}
            {{- if or .Values.collector.tlsConfig.otelHttp.enabled 
                    .Values.collector.tlsConfig.otelgRPC.enabled 
                    .Values.collector.tlsConfig.jaegerHttp.enabled
                    .Values.collector.tlsConfig.jaegergRPC.enabled
                    .Values.collector.tlsConfig.zipkin.enabled }}
            {{- if .Values.collector.tlsConfig.existingSecret }}
            - name: {{ .Values.collector.tlsConfig.existingSecret }}
              mountPath: "/collector-tls/ca.crt"
              subPath: "ca.crt"
              readOnly: true
            - name: {{ .Values.collector.tlsConfig.existingSecret }}
              mountPath: "/collector-tls/tls.crt"
              subPath: "tls.crt"
              readOnly: true
            - name: {{ .Values.collector.tlsConfig.existingSecret }}
              mountPath: "/collector-tls/tls.key"
              subPath: "tls.key"
              readOnly: true
            {{- else }}
            - name: {{ default "jaeger-collector-tls-secret" .Values.collector.tlsConfig.newSecretName }}
              mountPath: "/collector-tls/ca.crt"
              subPath: "ca.crt"
              readOnly: true
            - name: {{ default "jaeger-collector-tls-secret" .Values.collector.tlsConfig.newSecretName }}
              mountPath: "/collector-tls/tls.crt"
              subPath: "tls.crt"
              readOnly: true
            - name: {{ default "jaeger-collector-tls-secret" .Values.collector.tlsConfig.newSecretName }}
              mountPath: "/collector-tls/tls.key"
              subPath: "tls.key"
              readOnly: true
            {{- end }}
            {{- end }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
        - name: {{ .Values.jaeger.serviceName }}-sampling-configuration-volume
          configMap:
            name: {{ .Values.jaeger.serviceName }}-sampling-configuration
            defaultMode: 420
            items:
              - key: sampling
                path: sampling.json
        {{- if .Values.cassandraSchemaJob.tls.enabled }}
        - name: {{ template "cassandraSchemaJob.tls.secretName" . }}
          secret:
            secretName: {{ template "cassandraSchemaJob.tls.secretName" . }}
        {{- end }}
        {{- if and .Values.elasticsearch.client.tls.enabled (not .Values.elasticsearch.client.tls.insecureSkipVerify) }}
        - name: {{ .Values.jaeger.serviceName }}-elasticsearch-tls-assets
          secret:
            secretName: {{ template "elasticsearch.tls.secretName" . }}
        {{- end }}
        {{- if .Values.collector.tlsConfig.existingSecret }}
        - name: {{ .Values.collector.tlsConfig.existingSecret }}
          secret:
            secretName: {{ .Values.collector.tlsConfig.existingSecret }}
        {{- else }}
        - name: {{ default "jaeger-collector-tls-secret" .Values.collector.tlsConfig.newSecretName }}
          secret:
            secretName: {{  default "jaeger-collector-tls-secret" .Values.collector.tlsConfig.newSecretName }}
        {{- end }}
      {{- if .Values.collector.affinity }}
      affinity:
        {{- toYaml .Values.collector.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.collector.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.collector.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.collector.tolerations }}
      tolerations:
        {{- toYaml .Values.collector.tolerations | nindent 8 }}
      {{- end }}
{{- end }}
